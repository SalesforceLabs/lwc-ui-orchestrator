<?xml version="1.0" encoding="UTF-8"?>
<FlexiPage xmlns="http://soap.sforce.com/2006/04/metadata">
    <flexiPageRegions>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;&lt;strong&gt;LWC UI Orchestration&lt;/strong&gt;&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText2</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;Are you and your business users tired of triggering complex back end calculations from Salesforce that have poor updates on the job status and their failures? Sometimes users do not even get a notification that job has been completed, and it is really frustrating!&lt;/p&gt;&lt;p&gt;Sometimes we do not have any other option but to move complex logics asynchronously and run them using Queueables or Batches. And by doing that we submit these transactions to the Salesforce &quot;black box&quot; which is good because it simplifies many things, but the visibility for end users is limited, and this can make end users angry because they will probably just receive an in-app notification saying that &quot;something failed&quot; but struggle to add details on what failed ...&amp;nbsp;&lt;/p&gt;&lt;p&gt;Also, by doing that we start consuming asynchronous transactions, and we all now there is a daily limit we should not reach.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;What if we tell you that you can solve these 2 issues within an on-platform solution ?&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;This solution is called LWC UI ORCHESTRATOR ! LWC UI Orchestrator is a simple Framework that allows you to orchestrate apex jobs from a LWC in the user screen. It is so powerful! It can run parallel transactions, simple transaction, chainable transactions, ... without consuming any single asynchronous transaction! And since the apex transactions are triggered from LWC, we can get synchronous responses from the apex jobs right in the LWC (without any need to leverage expensive Platform Events Subscriptions) and keep updating the user in real time on each step the process currently is.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;This framework is capable of solving very complex problems that need to split the logic into small chunks, and provide great user experience. User does not need to wait to receive in-appl notifications or emails that might not be sent because of who knows why! The UI will be updated in real time.&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;UI Job Caller component can invoke LWC Orchestration Job (below )&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText3</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>metaDataName</name>
                    <value>Test_Job</value>
                </componentInstanceProperties>
                <componentName>uiJobCaller</componentName>
                <identifier>c_uiJobCaller</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;LWC UI Orchestration Component should be added as Utility.&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText4</identifier>
            </componentInstance>
        </itemInstances>
        <name>main</name>
        <type>Region</type>
    </flexiPageRegions>
    <masterLabel>UI Job</masterLabel>
    <template>
        <name>flexipage:defaultAppHomeTemplate</name>
    </template>
    <type>AppPage</type>
</FlexiPage>
