<?xml version="1.0" encoding="UTF-8"?>
<FlexiPage xmlns="http://soap.sforce.com/2006/04/metadata">
    <flexiPageRegions>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;&lt;strong style=&quot;font-size: 14px;&quot;&gt;LWC UI Orchestration&lt;/strong&gt;&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText2</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;Are you and your business users tired of triggering complex back end calculations from Salesforce that have poor updates on the job status and their failures? Sometimes users do not even get a notification that job has been completed, and it is really frustrating!&lt;/p&gt;&lt;p&gt;Sometimes we do not have any other option but to move complex logics asynchronously and run them using Queueables or Batches. And by doing that we submit these transactions to the Salesforce &quot;black box&quot; which is good because it simplifies many things, but the visibility for end users is limited, and this can make end users angry because they will probably just receive an in-app notification saying that &quot;something failed&quot; but struggle to add details on what failed ...&amp;nbsp;&lt;/p&gt;&lt;p&gt;Also, by doing that we start consuming asynchronous transactions, and we all now there is a daily limit we should not reach.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Similar issue can also happen when you make complex logic in a Flow, and that flow will start calling another flow and that flow another flow... and finally there is an error somewhere but nor you nor the business user have any idea of what and where it failed. &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;What if we tell you that you can solve these 2 issues within an on-platform solution ?&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;This solution is called &lt;strong&gt;LWC UI ORCHESTRATOR&lt;/strong&gt; ! LWC UI Orchestrator is a simple Framework that allows you to orchestrate &lt;strong&gt;apex jobs &lt;/strong&gt;and &lt;strong&gt;flows&lt;/strong&gt; from a LWC exposed to the user. It is so powerful! The LWC will be responsible to run the job, as he will know which are the list of apex classes or flows that need to be executed. It can run parallel apex transactions or flows, simple apex transactions / flows, chainable apex transactions / flows, ... without consuming any single asynchronous transaction! And since the apex transactions are triggered from LWC, we can get real-time updates from the tasks (apex transactions or flows) right in the LWC, without any need to leverage expensive Platform Events Subscriptions. This is so cool, because it keeps updating the user in real time on each step the process currently is.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;You can find a great video here: &lt;a href=&quot;https://youtu.be/e8YFVxblDK4&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://youtu.be/e8YFVxblDK4&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;This framework is capable of solving very complex problems that need to split the logic into small chunks, and provide great user experience, and each chunk runs in a separate transaction to avoid hitting limits. User does not need to wait to receive in-app notifications or email that might not be sent because of who knows why! The UI will be updated in real time.&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;&lt;strong&gt;DEMO Details&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(68, 68, 68);&quot;&gt;To get started...&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Assign the UIJob and UI Job Demo permissions to yourself.&lt;/li&gt;&lt;li&gt;Once validated, you can assign UI Job permission set to the business users who will be triggering the jobs&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;How this works ? &lt;/strong&gt;We have prepared a demo for you !!&lt;/p&gt;&lt;p&gt;We have created an example of a job that should be triggered by a user, by clicking into a button. This test Job is supposedly to be complex. For this example, this test Job is split into 3 tasks that do specific actions. Each task will insert Test Accounts using various methods, so you can see the full potential of this framework. &lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;Click on the button start below to trigger a Demo job &lt;/span&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Task 1 of the Test Job&lt;/strong&gt;&amp;nbsp;:140 account created synchronously through 1 unique transaction (easy!)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Task 2 of the Test Job&lt;/strong&gt;&amp;nbsp;: This task will run 3 apex transactions (3 sub tasks) in parallel! Each sub task will create 140 Test Accounts. So summarising:&lt;ul&gt;&lt;li&gt;140 account created synchronously through the first sub task of the parallel parent task&lt;/li&gt;&lt;li&gt;140 account created synchronously through the second sub task&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;&amp;nbsp;of the parallel parent task&lt;/span&gt;&lt;/li&gt;&lt;li&gt;140 account created synchronously through the third sub task&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;&amp;nbsp;of the parallel parent task&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Task 3 of the Test Job&lt;/strong&gt;&amp;nbsp;: This task will run in chain mode, meaning it will run X times sequentially. All accounts created in above tasks (560 test accounts) will be updated with chain number and record count number. Each chain task will process 100 records each, which means that this task will be invoked 6 times.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To give you full overview, the above job has been created using the 2 approaches available in this package:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Approach 1: Each task from the above job is an &lt;strong&gt;apex transactions &lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Approach 2: Each task from the above job calls a &lt;strong&gt;flow&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;For more information on how this has been setup, you can take a look into the &quot;Demo Job&quot; and &quot;Demo Job 2&quot; Custom Metadata type records created in the&amp;nbsp;&lt;/span&gt;&lt;strong style=&quot;color: rgb(68, 68, 68);&quot;&gt;UI Job Configuration&lt;/strong&gt;&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;&amp;nbsp;custom metadata type.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;If you want to setup your own jobs, you can use this Demo Job as a reference and create a new UI Job Configuration Custom Metadata type for the job you want to calculate, and develop the Apex Classes or create the flows that you want to be executed. The Custom Metadata will define the orchestration between the different apex classes, as well as any input parameters you want to pass to any of the classes. So cool !!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;For more details for Apex transaction orchestration, please check&amp;nbsp;&lt;/span&gt;&lt;strong style=&quot;color: rgb(68, 68, 68);&quot;&gt;UIJobDemo_UITask&lt;/strong&gt;&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt; Class and Demo_Job&amp;nbsp;&lt;/span&gt;&lt;strong style=&quot;color: rgb(68, 68, 68);&quot;&gt;UI Job Configuration&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;For more detail with flow orchestration, please check&amp;nbsp;&lt;/span&gt;&lt;strong style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;UIJobTaskFlow_Demo&lt;/strong&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt; flow&lt;/span&gt;&lt;span style=&quot;color: rgb(78, 201, 176);&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;and Demo_Job2&amp;nbsp;&lt;/span&gt;&lt;strong style=&quot;color: rgb(68, 68, 68);&quot;&gt;UI Job Configuration.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(68, 68, 68);&quot;&gt;How to validate what happened under the hoods (only for Salesforce developers) ?&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open Developer console before click &quot;Start Demo&quot; button.&lt;/li&gt;&lt;li&gt;Click &quot;Start Demo&quot; button&lt;/li&gt;&lt;li&gt;Check whether any log entry are creating for each task&lt;ol&gt;&lt;li&gt;when run Sync task it will create one log entry&lt;/li&gt;&lt;li&gt;when run Parallel Task , three log entries will be created without waiting of other log entry and The Status of Task on UI will be In progress until all three log entry is finished.&lt;/li&gt;&lt;li&gt;When chain task is running, the log entry will be created one after another.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;You can check more details by checking each log details.&lt;/p&gt;&lt;p&gt;Demo class has been coded to hit dml limit when it run method more then once in same transaction using dml in loop. You can check the job is successfully finished without getting error.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(68, 68, 68);&quot;&gt;Use case of LWC UI Orchestration&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Complex calculation of price and cost&lt;/li&gt;&lt;li&gt;Aggregations of data through high volume records, that need to be split into smaller tasks&lt;/li&gt;&lt;li&gt;Complex line item creation based on rule and discount matrix and etc with large volume&lt;/li&gt;&lt;li&gt;Update/ insert / delete large number of records ( such as create tasks based on template by checking status of other records and rule)&lt;/li&gt;&lt;li&gt;Complex interface including multiple interface calls and Salesforce transaction DMLs&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;And more...&lt;/p&gt;&lt;p&gt;User can see error during above process and retry.&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText3</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;&lt;strong&gt;Demo for Caller and Utility bar&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;These are the tasks defined as part of the demo Job (&lt;/span&gt;&lt;strong style=&quot;color: rgb(68, 68, 68);&quot;&gt;&lt;u&gt;and the component you need to add to the Utility Bar&lt;/u&gt;&lt;/strong&gt;&lt;span style=&quot;color: rgb(68, 68, 68);&quot;&gt;)! This component will automatically pop up from the Utility Bar when Clicking the button &quot;Start Demo&quot; and will see how their status is progressing - in real time !!&lt;/span&gt;&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText5</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>isdisplaybutton</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>metadataname</name>
                    <value>Demo_Job</value>
                </componentInstanceProperties>
                <componentName>uiJobController</componentName>
                <identifier>c_uiJobController</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>isdisplaybutton</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>metadataname</name>
                    <value>Demo_Job2</value>
                </componentInstanceProperties>
                <componentName>uiJobController</componentName>
                <identifier>c_uiJobController2</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;&lt;strong&gt;Demo for UI Job Controller embedded on Lightning Page.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This is the button you can add using Lighting App Builder to any app, page or LWC. This button is the one that will trigger the Job you are defining in the custom metadata type. Click it to test it out !&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText6</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>buttonLabel</name>
                    <value>Start Demo to execute a Job with Apex transactions</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>inputJSON</name>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>metaDataName</name>
                    <value>Demo_Job</value>
                </componentInstanceProperties>
                <componentName>uiJobCaller</componentName>
                <identifier>lwcorch_uiJobCaller</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>buttonLabel</name>
                    <value>Start Demo to execute a Job with a set of Flows to be called</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>inputJSON</name>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>metaDataName</name>
                    <value>Demo_Job2</value>
                </componentInstanceProperties>
                <componentName>uiJobCaller</componentName>
                <identifier>lwcorch_uiJobCaller4</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;After clicking on Start Demo, you can refresh this list view, and you will be able to view the accounts created by the job. Magic !!&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText7</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>enableInlineEdit</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>entityName</name>
                    <value>Account</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>filterName</name>
                    <value>LWC_Demo_Account</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>hideActionBar</name>
                    <value>false</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>hideSearchBar</name>
                    <value>false</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>pageSize</name>
                    <value>30</value>
                </componentInstanceProperties>
                <componentName>flexipage:filterListCard</componentName>
                <identifier>flexipage_filterListCard</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>decorate</name>
                    <value>true</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>richTextValue</name>
                    <value>&lt;p&gt;Finally, do not forget to delete the accounts that have just been created (named &quot;&lt;span style=&quot;color: rgb(206, 145, 120);&quot;&gt;LWC Orchestration Test Accoun&lt;/span&gt;&quot;) if you want to keep your sandbox clean, by clicking into the &quot;Purge Demo Data&quot; below (which is also using our framework :-) )&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;** &lt;/span&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;Warning&lt;/strong&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt; : Purge Task for demo is not using Chain task. so if you create more than 10K Test Accounts and do not delete them, can hit governor limit. &lt;/span&gt;&lt;/p&gt;</value>
                </componentInstanceProperties>
                <componentName>flexipage:richText</componentName>
                <identifier>flexipage_richText4</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>buttonLabel</name>
                    <value>Purge Apex Demo Data</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>inputJSON</name>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>metaDataName</name>
                    <value>Demo_Purge_Records</value>
                </componentInstanceProperties>
                <componentName>uiJobCaller</componentName>
                <identifier>lwcorch_uiJobCaller3</identifier>
            </componentInstance>
        </itemInstances>
        <itemInstances>
            <componentInstance>
                <componentInstanceProperties>
                    <name>buttonLabel</name>
                    <value>Purge Flow Demo Data</value>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>inputJSON</name>
                </componentInstanceProperties>
                <componentInstanceProperties>
                    <name>metaDataName</name>
                    <value>Demo_Purge_Records2</value>
                </componentInstanceProperties>
                <componentName>uiJobCaller</componentName>
                <identifier>lwcorch_uiJobCaller2</identifier>
            </componentInstance>
        </itemInstances>
        <name>main</name>
        <type>Region</type>
    </flexiPageRegions>
    <masterLabel>UI Job Sample Demo App</masterLabel>
    <template>
        <name>flexipage:defaultAppHomeTemplate</name>
    </template>
    <type>AppPage</type>
</FlexiPage>
